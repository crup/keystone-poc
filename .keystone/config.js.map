{
  "version": 3,
  "sources": ["../keystone.ts", "../src/schemas/user.ts", "../src/schemas/post.ts", "../src/schemas/tag.ts", "../src/schemas/make.ts", "../src/schemas/model.ts", "../src/schemas/variant.ts", "../src/schemas/index.ts", "../src/auth/index.ts"],
  "sourcesContent": ["// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n\nimport { config } from '@keystone-6/core';\n\n// to keep this file tidy, we define our schema in a different file\nimport schema from './src/schemas';\n\n// authentication is configured separately here too, but you might move this elsewhere\n// when you write your list-level access control functions, as they typically rely on session data\nimport { withAuth, session } from './src/auth';\n\nexport default withAuth(\n  config({\n    db: {\n      // we're using sqlite for the fastest startup experience\n      //   for more information on what database might be appropriate for you\n      //   see https://keystonejs.com/docs/guides/choosing-a-database#title\n      provider: 'sqlite',\n      url: 'file:./keystone.db',\n    },\n    lists: schema,\n    session,\n  })\n);\n", "import { list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\nimport {\n    text,\n    relationship,\n    password,\n    timestamp,\n  } from '@keystone-6/core/fields';\n\nexport const User = list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n\n    // this is the fields for our User list\n    fields: {\n      // by adding isRequired, we enforce that every User should have a name\n      //   if no name is provided, an error will be displayed\n      name: text({ validation: { isRequired: true } }),\n\n      email: text({\n        validation: { isRequired: true },\n        // by adding isIndexed: 'unique', we're saying that no user can have the same\n        // email as another user - this may or may not be a good idea for your project\n        isIndexed: 'unique',\n      }),\n\n      password: password({ validation: { isRequired: true } }),\n\n      // we can use this field to see what Posts this User has authored\n      //   more on that in the Post list below\n      posts: relationship({ ref: 'Post.author', many: true }),\n\n      createdAt: timestamp({\n        // this sets the timestamp to Date.now() when the user is first created\n        defaultValue: { kind: 'now' },\n      }),\n    },\n  })", "import { list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\nimport {\n    text,\n    relationship\n  } from '@keystone-6/core/fields';\nimport { document } from '@keystone-6/fields-document';\n\nexport const Post = list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n\n    // this is the fields for our Post list\n    fields: {\n      title: text({ validation: { isRequired: true } }),\n\n      // the document field can be used for making rich editable content\n      //   you can find out more at https://keystonejs.com/docs/guides/document-fields\n      content: document({\n        formatting: true,\n        layouts: [\n          [1, 1],\n          [1, 1, 1],\n          [2, 1],\n          [1, 2],\n          [1, 2, 1],\n        ],\n        links: true,\n        dividers: true,\n      }),\n\n      // with this field, you can set a User as the author for a Post\n      author: relationship({\n        // we could have used 'User', but then the relationship would only be 1-way\n        ref: 'User.posts',\n\n        // this is some customisations for changing how this will look in the AdminUI\n        ui: {\n          displayMode: 'cards',\n          cardFields: ['name', 'email'],\n          inlineEdit: { fields: ['name', 'email'] },\n          linkToItem: true,\n          inlineConnect: true,\n        },\n        // a Post can only have one author\n        //   this is the default, but we show it here for verbosity\n        many: false,\n      }),\n\n      // with this field, you can add some Tags to Posts\n      tags: relationship({\n        // we could have used 'Tag', but then the relationship would only be 1-way\n        ref: 'Tag.posts',\n\n        // a Post can have many Tags, not just one\n        many: true,\n\n        // this is some customisations for changing how this will look in the AdminUI\n        ui: {\n          displayMode: 'cards',\n          cardFields: ['name'],\n          inlineEdit: { fields: ['name'] },\n          linkToItem: true,\n          inlineConnect: true,\n          inlineCreate: { fields: ['name'] },\n        },\n      }),\n    },\n  })", "import { list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\nimport {\n    text,\n    relationship,\n  } from '@keystone-6/core/fields';\n\n// this last list is our Tag list, it only has a name field for now\nexport const Tag = list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n\n    // setting this to isHidden for the user interface prevents this list being visible in the Admin UI\n    ui: {\n      isHidden: true,\n    },\n\n    // this is the fields for our Tag list\n    fields: {\n      name: text(),\n      // this can be helpful to find out all the Posts associated with a Tag\n      posts: relationship({ ref: 'Post.tags', many: true }),\n    },\n})", "import { list } from \"@keystone-6/core\";\nimport { allowAll } from \"@keystone-6/core/access\";\nimport {\n  text,\n  relationship,\n  timestamp,\n} from \"@keystone-6/core/fields\";\n\nexport const Make = list({\n  access: allowAll,\n  fields: {\n    name: text({ validation: { isRequired: true }, isIndexed: \"unique\" }),\n    model: relationship({\n            ref: \"Model.make\",\n            many: true,\n            ui: {\n                createView: {\n                    fieldMode: \"hidden\"\n                },\n                hideCreate: true\n            }\n        }),\n    createdAt: timestamp({\n      defaultValue: { kind: \"now\" },\n      ui: {\n            createView: {\n                fieldMode: \"hidden\"\n            },\n            itemView: {\n              fieldMode: \"read\"\n            }\n        },\n    }),\n  },\n});\n", "import { list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\nimport {\n    text,\n    relationship,\n    password,\n    timestamp,\n  } from '@keystone-6/core/fields';\n\nexport const Model = list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n\n    // this is the fields for our User list\n    fields: {\n      make: relationship({\n        ref: 'Make.model',\n        many: false,\n        ui: {\n            hideCreate: true,\n            linkToItem: false\n        }\n      }),\n      name: text({ validation: { isRequired: true } }),\n      variant: relationship({\n        ref: 'Variant.model',\n        many: true,\n        ui: {\n            createView: {\n                fieldMode: \"hidden\"\n            },\n            itemView: {\n                fieldMode: \"hidden\"\n            }\n        }\n      }),\n      createdAt: timestamp({\n        defaultValue: { kind: \"now\" },\n        ui: {\n              createView: {\n                  fieldMode: \"hidden\"\n              },\n              itemView: {\n                fieldMode: \"read\"\n              }\n          },\n      }),\n    },\n  })", "import { list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\nimport {\n    text,\n    relationship,\n    password,\n    timestamp,\n  } from '@keystone-6/core/fields';\n\nexport const Variant = list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n\n    // this is the fields for our User list\n    fields: {\n      make: relationship({\n        ref: 'Make',\n        many: false,\n      }),\n      model: relationship({\n        ref: 'Model.variant',\n        many: false,\n      }),\n      name: text({ validation: { isRequired: true } }),\n      createdAt: timestamp({\n        // this sets the timestamp to Date.now() when the user is first created\n        defaultValue: { kind: 'now' },\n      }),\n    },\n  })", "// when using Typescript, you can refine your types to a stricter subset by importing\n// the generated types from '.keystone/types'\nimport { User } from \"./user\";\nimport { Post } from \"./post\";\nimport { Tag } from \"./tag\"\nimport { Make } from \"./make\";\nimport { Model } from \"./model\";\nimport { Variant } from \"./variant\";\n// import type { Lists } from '.keystone/types';\n\nexport default {\n  User,\n  Post,\n  Tag,\n  Make,\n  Model,\n  Variant\n};\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from '@keystone-6/core/session';\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: 'name createdAt',\n  secretField: 'password',\n\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: ['name', 'email', 'password'],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n  },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n"],
  "mappings": "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",
  "names": ["import_core", "import_core", "import_access", "import_fields", "import_core", "import_access", "import_fields", "import_core", "import_access", "import_fields", "import_core", "import_access", "import_fields", "import_core", "import_access", "import_fields"]
}
